@model RentACar.Models.CarsViewModel

<div class="no-bottom no-top zebra" id="content">
    <div id="top"></div>

    <!-- Header Section -->
    <section id="subheader" class="jarallax text-light">
        <img src="images/background/2.jpg" class="jarallax-img" alt="">
        <div class="center-y relative text-center">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 text-center">
                        <h1>Cars</h1>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Filter & Car List Section -->
    <section id="section-cars">
        <div class="container">
            <div class="row">

                <!-- Filter Sidebar -->
                <div class="col-lg-3">
                    <div class="item_filter_group">
                        <h4>Search</h4>
                        <div class="de_form">
                            <input type="text" placeholder="Search by name..." id="search-input" class="form-control" />
                        </div>
                    </div>

                    <div class="item_filter_group">
                        <h4>Car Body Type</h4>
                        <div class="de_form">
                            @foreach (var bodyType in Model.Categories)
                            {
                                <div class="de_checkbox">
                                    <input id="car_body_type_@bodyType.Id"
                                           name="car_body_type"
                                           type="checkbox"
                                           class="filter-checkbox"
                                           value="@bodyType.Id" />
                                    <label for="car_body_type_@bodyType.Id">@bodyType.Name</label>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="item_filter_group">
                        <h4>Price (₼)</h4>
                        <div class="price-input">
                            <div class="field">
                                <span>Min</span>
                                <input type="number" class="input-min" value="0">
                            </div>
                            <div class="field">
                                <span>Max</span>
                                <input type="number" class="input-max" value="2000">
                            </div>
                        </div>
                        <div class="slider">
                            <div class="progress"></div>
                        </div>
                        <div class="range-input">
                            <input type="range" class="range-min" min="0" max="2000" value="0" step="1">
                            <input type="range" class="range-max" min="0" max="2000" value="2000" step="1">
                        </div>
                    </div>
                </div>

                <!-- Car Cards -->
                <div class="col-lg-9">
                    <div class="row" id="car-list">
                        @foreach (var item in Model.Cars)
                        {
                            <div class="col-xl-4 col-lg-6">
                                <div class="de-item mb30">
                                    <a href="@Url.Action("Details", "Car", new { id = item.Id })">
                                        <div class="d-img">
                                            <img src="images/car/@item.ImageUrl" class="img-fluid" alt="@item.Name">
                                        </div>
                                    </a>
                                    <div class="d-info">
                                        <div class="d-text">
                                            <h4>@item.Name</h4>
                                            <div class="d-item_like">
                                                <i class="fa fa-heart"></i>
                                            </div>
                                            <div class="d-attributes">
                                                <div class="d-attr-row">
                                                    <span class="d-atr"><img src="images/icons/1-green.svg" alt="">@item.Seats</span>
                                                    <span class="d-atr"><img src="images/icons/2-green.svg" alt="">@item.Doors</span>
                                                    <span class="d-atr"><img src="images/icons/3-green.svg" alt="">@item.Luggage</span>
                                                </div>
                                                <div class="d-category">
                                                    <span class="d-atr"><img src="images/icons/4-green.svg" alt="">@item.Category?.Name</span>
                                                </div>
                                            </div>

                                            <div class="d-price">
                                                Günlük qiymət <span>₼@item.PricePerDay.ToString("N0")</span>
                                                <a href="/Booking/QuickBooking?carId=@item.Id" class="btn-main">Rent Now</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </section>
</div>

<a href="#" id="back-to-top"></a>

<style>
    /* Kartın ümumi hündürlüyü sabit qalır */
    .de-item {
        width: 100%;
        min-height: 450px; /* lazım olduqda artır */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        background: #fff;
    }

    /* Şəkil konteynerinin ölçüsü sabitdir */
    .d-img {
        width: 100%;
        height: 220px;
        overflow: hidden;
        border-bottom: 1px solid #eee;
    }

        /* Şəkil konteynerə uyğun kəsilir, deformasiya olmur */
        .d-img img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

    /* Kartın məlumat hissəsi */
    .d-info {
        padding: 15px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    /* Digər mövcud CSS-ləri aşağıya əlavə et */

    .d-attributes {
        display: flex;
        flex-direction: column;
        gap: 8px;
        min-height: 50px; /* category üçün sabit minimum hündürlük */
    }

    .d-attr-row {
        display: flex;
        justify-content: space-between;
        gap: 8px;
    }

        .d-attr-row .d-atr {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .d-category {
        display: flex;
        justify-content: flex-start;
        min-height: 20px; /* category adı üçün minimum hündürlük */
    }

        .d-category .d-atr {
            display: flex;
            align-items: center;
            gap: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    #search-input {
        border: 2px solid #1ec38b;
        border-radius: 5px;
        padding: 10px 12px;
        width: 100%;
        font-size: 15px;
        outline: none;
        box-shadow: none;
        transition: border 0.3s, box-shadow 0.3s;
    }

        #search-input:focus {
            border-color: #16a874;
            box-shadow: 0 0 0 2px rgba(30, 195, 139, 0.2);
        }

    .de_checkbox input[type="checkbox"] {
        accent-color: #1ec38b;
        width: 16px;
        height: 16px;
        cursor: pointer;
    }

    .item_filter_group {
        background: #fff;
        border: 1px solid #eee;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 25px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05);
    }

        .item_filter_group h4 {
            font-weight: bold;
            color: #0d1a26;
            margin-bottom: 15px;
        }
</style>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const checkboxes = document.querySelectorAll(".filter-checkbox");
            const searchInput = document.getElementById("search-input");
            const rangeMin = document.querySelector(".range-min");
            const rangeMax = document.querySelector(".range-max");

            checkboxes.forEach(cb => cb.addEventListener("change", filterCars));
            searchInput.addEventListener("input", debounce(filterCars, 300));
            rangeMin.addEventListener("input", filterCars);
            rangeMax.addEventListener("input", filterCars);

            function filterCars() {
                const selectedBodyTypes = Array.from(checkboxes)
                    .filter(cb => cb.checked)
                    .map(cb => parseInt(cb.value));

                const keyword = searchInput.value.trim();
                const minPrice = parseFloat(rangeMin.value);
                const maxPrice = parseFloat(rangeMax.value);

                const data = {
                    bodyTypes: selectedBodyTypes,
                    searchKeyword: keyword,
                    minPrice: minPrice,
                    maxPrice: maxPrice
                };

                fetch("/Car/Filter", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                    .then(res => res.text())
                    .then(html => {
                        document.getElementById("car-list").innerHTML = html;
                    });
            }

            function debounce(fn, delay) {
                let timeoutId;
                return function (...args) {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => fn.apply(this, args), delay);
                };
            }
        });
    </script>
}
